1、回溯问题本质是：递归（暴力遍历所有结果）

    #回溯的模板：伪代码
    viod backtracking(参数){
        if(终止条件){
            保存满足条件的结果;
            return;
        }
        for(本层集合元素){
            处理当前元素;
            backtracking(参数);//递归
            回溯，撤销结果;
        }
    }
    #回溯解决的问题：
    排列，组合，分割，子集，棋盘格

2、下边针对回溯解决的问题分别讨论：

####组合问题：
题目链接：https://leetcode-cn.com/problems/combinations/

给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。

示例:
输入: n = 4, k = 2
输出:
[
[2,4],
[3,4],
[2,3],
[1,2],
[1,3],
[1,4],
]

##题解：
class Solution{
public:
    vector<vector<int>> result;
    vector<int> tmp;
    void backtracking(int start_index, int n, int k){
        if(tmp.size()==k){
            //
            result.push_back(tmp);
            return ;
        }
        for(int i=startIndex;i<n;i++){
            //
            tmp.push_back(i);
            backtracking(i+1,n,k);
            //
            tmp.pop_back();
        }
    }
    vector<vector<int>> Solution(int n, int k){
        //
        backtracking(0,n,k);
        return result;
    }
};

####组合问题再剪枝：
接下来看一下优化过程如下：

1、已经选择的元素个数：path.size();

2、还需要的元素个数为: k - path.size();

3、在集合n中至多要从该起始位置 : n - (k - path.size()) + 1，开始遍历，为什么有个+1呢，因为包括起始位置，我们要是一个左闭的集合。

举个例子，n = 4，k = 3， 目前已经选取的元素为0（path.size为0），n - (k - 0) + 1 即 4 - ( 3 - 0) + 1 = 2。

class Solution{
public:
    vector<vector<int>> result;
    vector<int> tmp;
    void backtracking(int start_index, int n, int k){
        if(tmp.size()==k){
            //
            result.push_back(tmp);
            return ;
        }
        for(int i=start_index;i<n-(k-tmp.size());i++){//剪枝在这里操作
            tmp.push_back(i);
            backtracking(i+1, n, k);
            tmp.pop_back();
        }
    }
    vector<vector<int>> Solution(int n, int k){
        //
        backtracking(1, n, k);
        return result;
    }
};

####组合总和问题
链接：https://leetcode-cn.com/problems/combination-sum-iii/
找出所有相加之和为 n 的 k 个数的组合。组合中只允许含有 1 - 9 的正整数，并且每种组合中不存在重复的数字。
说明：
所有数字都是正整数。
解集不能包含重复的组合。
示例 1:
输入: k = 3, n = 7
输出: [[1,2,4]]

示例 2:
输入: k = 3, n = 9
输出: [[1,2,6], [1,3,5], [2,3,4]]

##题解
class Solution {
private:
    vector<vector<int>> result; // 存放结果集
    vector<int> path; // 符合条件的结果
    // targetSum：目标和，也就是题目中的n。
    // k：题目中要求k个数的集合。
    // sum：已经收集的元素的总和，也就是path里元素的总和。
    // startIndex：下一层for循环搜索的起始位置。
    void backtracking(int targetSum, int k, int sum, int startIndex) {
        if (sum > targetSum) { // 剪枝操作
            return; // 如果path.size() == k 但sum != targetSum 直接返回
        }
        if (path.size() == k) {
            if (sum == targetSum) result.push_back(path);
            return;
        }
        for (int i = startIndex; i <= 9; i++) {
            sum += i; // 处理
            path.push_back(i); // 处理
            backtracking(targetSum, k, sum, i + 1); // 注意i+1调整startIndex
            sum -= i; // 回溯
            path.pop_back(); // 回溯
        }
    }

public:
    vector<vector<int>> combinationSum3(int k, int n) {
        result.clear(); // 可以不加
        path.clear();   // 可以不加
        backtracking(n, k, 0, 1);
        return result;
    }
};
